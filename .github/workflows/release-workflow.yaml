name: Python Package Build and Upload on Release

on:
  release:
    types: [created]  # Trigger the workflow when a new release is created

jobs:
  build-and-upload:
    strategy:
      matrix:
        python-version: [ "3.9", "3.10", "3.11" ]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        python -m poetry config virtualenvs.create false

    - name: Install package dependencies
      run: poetry install

    - name: Set release version from tag
      run: echo "RELEASE_VERSION=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_ENV

    - name: Update version in pyproject.toml
      run: |
        poetry version $(git describe --tags --abbrev=0 | sed 's/^v//')

    - name: Build package
      run: poetry build

    - name: Set OS Name - linux / mac
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          echo "OS_NAME=manylinux2014_x86_64" >> $GITHUB_ENV
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          echo "OS_NAME=win" >> $GITHUB_ENV
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          echo "OS_NAME=macosx_10_15_x86_64" >> $GITHUB_ENV
        else
          echo "Unknown OS" >&2
          exit 1
        fi

    - name: Set OS Name - windows
      if: matrix.os == 'windows-latest'
      run: |
        $env:OS_NAME = "win_amd64"

    - name: Set Python version in env
      if: matrix.os != 'windows-latest'
      run: |
        converted_python_version="${{ matrix.python-version }}"
        echo "PYTHON_VERSION=$converted_python_version" >> $GITHUB_ENV
        
    - name: Set Python version in env
      if: matrix.os == 'windows-latest'
      run: |
        $converted_python_version = $env:matrix_python_version
        Write-Host "PYTHON_VERSION=$converted_python_version" >> $env:GITHUB_ENV


    - name: Upload package artifact
      uses: actions/upload-artifact@v3
      with:
        name: stixorm-${{ env.RELEASE_VERSION }}-cp${{ env.PYTHON_VERSION }}cp${{ env.PYTHON_VERSION }}m-${{ env.OS_NAME }}
        path: dist/*.whl  # Upload the built package (replace with appropriate file format if not using wheels


  pypi-publish:
    needs: [ 'build-and-upload' ]
    environment: 'publish'

    name: upload release to PyPI
    runs-on: ubuntu-latest
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Install and authenticate Twine
        run: |
          pip install twine


      - name: Publish distributions to PyPI
        run: |
          # Use twine to upload the distributions one by one
          for file in artifacts/*; do
            twine upload "$file"
          done
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}