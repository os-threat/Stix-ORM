name: Python Package Build and Upload on Release

on:
  release:
    types: [created]  # Trigger the workflow when a new release is created

jobs:
  build-and-upload:
    strategy:
      matrix:
        python-version: [ "3.9", "3.10", "3.11" ]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: pip install poetry

    - name: Install package dependencies
      run: poetry install

    - name: Set release version from tag
      run: echo "RELEASE_VERSION=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_ENV

    - name: Update version in pyproject.toml
      run: |
        poetry version $(git describe --tags --abbrev=0 | sed 's/^v//')

    - name: Build package
      run: poetry build

    - name: Set OS Name - linux / mac
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          echo "OS_NAME=linux" >> $GITHUB_ENV
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          echo "OS_NAME=win" >> $GITHUB_ENV
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          echo "OS_NAME=mac" >> $GITHUB_ENV
        else
          echo "Unknown OS" >&2
          exit 1
        fi

    - name: Set OS Name - windows
      if: matrix.os == 'windows-latest'
      run: |
        if ($env:MATRIX_OS -eq "ubuntu-latest") {
            $env:OS_NAME = "linux"
        }
        elseif ($env:MATRIX_OS -eq "windows-latest") {
            $env:OS_NAME = "win"
        }
        elseif ($env:MATRIX_OS -eq "macos-latest") {
            $env:OS_NAME = "mac"
        }
        else {
            Write-Host "Unknown OS"
            exit 1
        }

    - name: Set Python version in env
      run: echo "PYTHON_VERSION=py${{ matrix.python-version }}" >> $GITHUB_ENV

    - name: Upload package artifact
      uses: actions/upload-artifact@v2
      with:
        name: stixorm-${{ env.RELEASE_VERSION }}-${{ env.PYTHON_VERSION }}-${{ env.OS_NAME }}
        path: dist/*.whl  # Upload the built package (replace with appropriate file format if not using wheels


    - name: Install Twine
      run: pip install twine

    #- name: Upload to PyPI
    #  env:
    #    TWINE_USERNAME: __token__  # Use the PyPI token or your username here
   #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}  # Use the PyPI token or your password here
   #   run: twine upload dist/*