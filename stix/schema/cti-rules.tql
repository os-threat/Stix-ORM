#
# Copyright (C) 2021 Vaticle
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

define

#
# Description
# These two rules create a relation of type kill-chain between all the kill-chain-phase entities
# that have the same name. The first rule infers the relation, and the second rule infers the attribute
# kill-chain-name. We need to split this up into two rules as we can only infer one relation or one attribute
# per rule.
# Example:
# If we have many different kill-chain-phase entites that are called "Mitre Attack", but with different phases,
# we can infer a kill-chain relation between all the phases in that kill chain. This makes it easy for us to
# query across all the phases in that kill chain.
rule part-of-one-kill-chain-relation:
when {
	$kill-chain-1 isa kill-chain-phase, has kill-chain-name $x;
	$kill-chain-2 isa kill-chain-phase, has kill-chain-name $x;
	not {$kill-chain-1 is $kill-chain-2;};
} then {
	(participating-kill-chain-phase: $kill-chain-1, participating-kill-chain-phase: $kill-chain-2) isa kill-chain;
};

rule part-of-one-kill-chain-attribute-name:
when {
	$kill-chain-1 isa kill-chain-phase, has kill-chain-name $x;
	$kill-chain-2 isa kill-chain-phase, has kill-chain-name $x;
	not {$kill-chain-1 is $kill-chain-2;};
	$kill-chain (participating-kill-chain-phase: $kill-chain-1, participating-kill-chain-phase: $kill-chain-2) isa kill-chain;
} then {
	$kill-chain has $x;
};

# Description
# This rule infers that if X is using Y, and if Y is using Z, then that means that X is also using Z
# Example:
# If an intrusion set is using a malware, and if that malware is using a specific attack pattern,
# then we want to infer that that intrusion set is using that specific attack pattern
rule transitive-use:
when {
	$x isa stix-domain-object, has name $name1;
	$y isa stix-domain-object, has name $name2;
	$z isa stix-domain-object, has name $name3;
	$use1 (used-by: $x, used: $y) isa uses;
	$use2 (used-by: $y, used: $z) isa uses;
} then {
	(used-by: $x, used: $z) isa uses;
};

# Description:
# If y has been attributed to x, and if y is using z, then we infer that x is using z also
# Example:
# If an identity has been attributed to a threat actor,
# and if that identity is using a malware, then we want to create a "use" relation
# between the threat actor and the malware; the threat actor is using the malware
# through the identiy
rule attribution-when-using:
when {
	(result: $x, fault-of: $y) isa attributed-to;
	(used-by: $y, used: $z) isa uses;
} then {
	(used-by: $x, used: $z) isa uses;
};

# Description:
# If y has been attributed to x, and if y is targetting z, then we can infer that x is targetting z
# Example:
# If an attack pattern, for example "spear fishing", has been attributed to a specific identity named "Bravo",
# and if that attack pattern is targetting a location, for example New York,
# we can infer that the identiy "Bravo" is targeting the location New York
rule attribution-when-targeting:
when {
	(result: $x, fault-of: $y) isa attributed-to;
	(targetter: $y, targetted: $z) isa targets;
} then {
	(targetter: $x, targetted: $z) isa targets;
};

# Description
# This rule infers a relation of type inferred-mitigation between a course of action and an intursion set, if the
# course of action mitigates an SDO which is used by an intrusion set. Note: as the relation "use" is transitive (see rule above),
# the SDO and the intrusion set may not be directly connected.
# Example:
# The entity type "course-of-action" with name "Restrict File and Directory Permissions" is mitigating against an entity "attack-pattern"
# with name "indicator Blocking". If that "attack-pattern" is being used by an entiy of type "intrusion-set" with name "BlackTech", then an i
# nferred relation of type "inferred-mitigation" will be created between the "course-of-action" and "the intrusion-set"
rule mitigating-course-of-action-with-intrusion-set:
when {
	$course-of-action isa course-of-action, has name $name1;
	$sdo isa stix-domain-object, has name $name2;
	$intrusion-set isa intrusion-set, has name $name3;
	$mitigation (mitigator: $course-of-action, mitigated: $sdo) isa mitigates;
	$use (used: $sdo, used-by: $intrusion-set) isa uses;
} then {
	(mitigator: $course-of-action, mitigated: $intrusion-set) isa inferred-mitigation;
};